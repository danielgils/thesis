n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim27.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim28.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim29.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim30.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim31.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
# check duplicates
rm(list=ls())
#read in design
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
x <- read.table('X_sim32.txt', header= T)
#settings
nresp <- 200
nsets <- 18
nalts <- 2
niter <- 10
# get individual design
setsize <- nalts*nsets
ides <- list()
imat <- list()
n.unique <- length(niter*nresp)
for (i in 1:(niter*nresp)){
ides[[i]] <- x[((i-1)*setsize + 1): (setsize*i), ]
imat[[i]] <- split(ides[[i]], c(TRUE, FALSE))
imat[[i]] <- cbind(imat[[i]]$'TRUE', imat[[i]]$'FALSE')
#unique choice sets
n.unique[i]<- nrow(unique(imat[[i]]))
}
n.unique
mean(n.unique)
17.6/18
8/12 + 10.6/12 + 10.4/18 + 13.2/18 + 8.3/12 + 10.6/12 + 10.4/18 + 13.2/18
(8/12)
(8/12 + 10.6/12 + 10.4/18 + 13.2/18 + 8.3/12 + 10.6/12 + 10.4/18 + 13.2/18)/8
(2/12 + 7/12 + 2.4/18 + 7/18 + 2/12 + 7/12 + 2.4/18 + 7/18)/8
###
# Simulation study Marcel 2
# scenario 1
###
rm(list=ls())
#setwd
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
#libraries
source(file = "functions2.R")
### settings (adjust)
Nresp <- 100
Ntotal <- 18
Nfixed <- 1
prior <- "uninf"
accuracy <- "low"
hetero <- "low"
iterations <- 20
#### Initialize
Ntasks <- Ntotal - Nfixed
profs <- profiles(lvls = c(3, 3, 3), coding = "contr.sum")[[2]] #effect coding
fcombs <- full_sets(cand = profs, n_alts = 2)
n_alts <- 2
truePOPstd <- diag(ncol(profs))
#draw samples from true distribution (each sample = respondent)
if (accuracy == "low" && hetero == "low") {
betas <- read.table(file = "lowlow.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(0.22, each = 6)
} else if (accuracy == "low" && hetero == "medium") {
betas <- read.table(file = "lowmed.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(0.5, each = 6)
} else if (accuracy == "low" && hetero == "high") {
betas <- read.table(file = "lowhigh.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(1.22, each = 6)
} else if (accuracy == "medium" && hetero == "low") {
betas <- read.table(file = "medlow.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(0.38, each = 6)
} else if (accuracy == "medium" && hetero == "medium") {
betas <- read.table(file = "medmed.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(0.86, each = 6)
} else if (accuracy == "medium" && hetero == "high") {
betas <- read.table(file = "medhigh.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(1.73, each = 6)
} else if (accuracy == "high" && hetero == "low") {
betas <- read.table(file = "highlow.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(0.55, each = 6)
} else if (accuracy == "high" && hetero == "med") {
betas <- read.table(file = "highmed.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(1.22, each = 6)
} else if (accuracy == "high" && hetero == "high") {
betas <- read.table(file = "highhigh.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(3, each = 6)
} else {print("wrong specification")}
#prior distribution
if (prior == "uninf"){
prior_m <- c( 0, 0, 0, 0, 0, 0)
prior_std <- diag(length(truePOPmean))
diag(prior_std) <- 10
} else if (prior == "inf") {
prior_m <- truePOPmean
prior_std <- truePOPstd
}
prior_cov <- (prior_std)^2
##empty vectors
total_des <- list(Nresp)
total_Y <- list(Nresp)
fullX <- list(iterations)
fully <- list(iterations)
#Initial sets
if (prior == "uninf") {
fix <- read.table(file="u.txt", sep="")
} else if (prior == "inf") {
if (accuracy == "low" && hetero == "low") {
fix <- read.table(file="ll.txt", sep="")
}else if (accuracy == "low" && hetero == "medium") {
fix <- read.table(file="lm.txt", sep="")
}else if (accuracy == "low" && hetero == "high") {
fix <- read.table(file="lh.txt", sep="")
}else if (accuracy == "medium" && hetero == "low") {
fix <- read.table(file="ml.txt", sep="")
}else if (accuracy == "medium" && hetero == "medium") {
fix <- read.table(file="mm.txt", sep="")
}else if (accuracy == "medium" && hetero == "high") {
fix <- read.table(file="mh.txt", sep="")
}else if (accuracy == "high" && hetero == "low") {
fix <- read.table(file="hl.txt", sep="")
}else if (accuracy == "high" && hetero == "med") {
fix <- read.table(file="hm.txt", sep="")
} else if (accuracy == "high" && hetero == "high") {
fix <- read.table(file="hh.txt", sep="")
}
}
# initial sets
fix1 <- fix[1:2, ]
fix2 <- fix[3:4, ]
fix3 <- fix[5:6, ]
fix4 <- fix[7:8, ]
fix5 <- fix[9:10, ]
fix6 <- fix[11:12, ]
fix7 <- fix[13:14, ]
fix8 <- fix[15:16, ]
fix9 <- fix[17:18, ]
fix10 <- fix[19:20, ]
#############
######## SIMULATE
#############
#repeat simulations
for (i in 1: iterations){
print(i)
#for every respondend
for (r in 1: Nresp){
#initial design (10 different initial sets)
if( 0 <  r & r <  11){design_I<-fix1
}else if( 11 <= r & r < 21){design_I<-fix2
}else if( 21 <= r & r < 31){design_I<-fix3
}else if( 31 <= r & r < 41){design_I<-fix4
}else if( 41 <= r & r < 51){design_I<-fix5
}else if( 51 <= r & r < 61){design_I<-fix6
}else if( 61 <= r & r < 71){design_I<-fix7
}else if( 71 <= r & r < 81){design_I<-fix8
}else if( 81 <= r & r < 91){design_I<-fix9
}else if( 91 <= r & r < 101){design_I<-fix10
}
#Individual betas
beta_I <- as.matrix(betas[r, ])
#generate individual responses for inital set(s)
Y_I <- numeric()
for (s in 1:(nrow(design_I) / n_alts)){
setn <- as.matrix(design_I[((s * 2) - 1) : (s * 2), ])
Y_I <- c(Y_I, respond(par = beta_I, set = setn, n_alts = 2))
}
#For each respondent get optimal design sequentially (Ntasks)
design_I <- rbind(design_I, matrix(data = NA, nrow = Ntasks * n_alts, ncol = ncol(profs)))
fcombs <- full_sets(cand = profs, n_alts = 2)
for (c in 1:Ntasks){
#update parameters
ind <- apply(design_I, 1, function(x) all(is.na(x)))
des_i <- as.matrix(design_I[ !ind, ])
y <- Y_I[1:nrow(des_i)]
samples <- impsampling(prior_mean = prior_m, prior_covar = prior_cov, des = des_i, n_alts = n_alts, Y = y, m = 8)
sam <- samples[[1]]
w <- samples[[2]]
#new set
setobject <- KL_info(fp = profs, fcomb = fcombs, par_samples = sam, weights = w, n_alts = n_alts)
new_set <- setobject[[1]]
#duplicates
dupl <- setobject[[2]]
fcombs <- fcombs[-dupl, ]
#update
design_I[((Nfixed*n_alts) +(2 * c) - 1):((Nfixed * n_alts) + (2 * c)) , ] <- new_set
resp <- respond(par = beta_I, set = new_set, n_alts = n_alts, bin = TRUE)
Y_I <- c(Y_I, resp)
}
#save all individual designs together
total_des[[r]] <- design_I
total_Y[[r]] <- Y_I  #binary respons
}
#bind together
fullX[[i]] <- do.call(rbind, total_des)
fully[[i]] <- do.call(rbind, total_Y)
}
X <- do.call(rbind, fullX)
Y <- do.call(rbind, fully)
#binary response to discrete
D <- transf(Y)
#write to excel file
#write.table(X, file="X_1_uninf.txt", quote = FALSE, sep=" ", row.names = FALSE)
#write.table(D, file="Y_1_uninf.txt", quote = FALSE, sep=" ", row.names = FALSE)
X
###
# Simulation study Marcel 2
# scenario 1
###
rm(list=ls())
#setwd
setwd('C:/Users/u0105757/Desktop/Rotterdam study/simulation paper')
#libraries
source(file = "functions2.R")
### settings (adjust)
Nresp <- 100
Ntotal <- 18
Nfixed <- 1
prior <- "uninf"
accuracy <- "low"
hetero <- "low"
iterations <- 20
#### Initialize
Ntasks <- Ntotal - Nfixed
profs <- profiles(lvls = c(3, 3, 3), coding = "contr.sum")[[2]] #effect coding
fcombs <- full_sets(cand = profs, n_alts = 2)
n_alts <- 2
truePOPstd <- diag(ncol(profs))
#draw samples from true distribution (each sample = respondent)
if (accuracy == "low" && hetero == "low") {
betas <- read.table(file = "lowlow.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(0.22, each = 6)
} else if (accuracy == "low" && hetero == "medium") {
betas <- read.table(file = "lowmed.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(0.5, each = 6)
} else if (accuracy == "low" && hetero == "high") {
betas <- read.table(file = "lowhigh.txt", sep = "", dec=",")
truePOPmean <- c(-0.5, 0, -0.5,	0, -0.5, 0)
diag(truePOPstd) <- rep(1.22, each = 6)
} else if (accuracy == "medium" && hetero == "low") {
betas <- read.table(file = "medlow.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(0.38, each = 6)
} else if (accuracy == "medium" && hetero == "medium") {
betas <- read.table(file = "medmed.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(0.86, each = 6)
} else if (accuracy == "medium" && hetero == "high") {
betas <- read.table(file = "medhigh.txt", sep = "", dec=",")
truePOPmean <- c(-1.5, 0, -1.5,	0, -1.5, 0)
diag(truePOPstd) <- rep(1.73, each = 6)
} else if (accuracy == "high" && hetero == "low") {
betas <- read.table(file = "highlow.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(0.55, each = 6)
} else if (accuracy == "high" && hetero == "med") {
betas <- read.table(file = "highmed.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(1.22, each = 6)
} else if (accuracy == "high" && hetero == "high") {
betas <- read.table(file = "highhigh.txt", sep = "", dec=",")
truePOPmean <- c(-3, 0, -3,	0, -3, 0)
diag(truePOPstd) <- rep(3, each = 6)
} else {print("wrong specification")}
#prior distribution
if (prior == "uninf"){
prior_m <- c( 0, 0, 0, 0, 0, 0)
prior_std <- diag(length(truePOPmean))
diag(prior_std) <- 10
} else if (prior == "inf") {
prior_m <- truePOPmean
prior_std <- truePOPstd
}
prior_cov <- (prior_std)^2
##empty vectors
total_des <- list(Nresp)
total_Y <- list(Nresp)
fullX <- list(iterations)
fully <- list(iterations)
#Initial sets
if (prior == "uninf") {
fix <- read.table(file="u.txt", sep="")
} else if (prior == "inf") {
if (accuracy == "low" && hetero == "low") {
fix <- read.table(file="ll.txt", sep="")
}else if (accuracy == "low" && hetero == "medium") {
fix <- read.table(file="lm.txt", sep="")
}else if (accuracy == "low" && hetero == "high") {
fix <- read.table(file="lh.txt", sep="")
}else if (accuracy == "medium" && hetero == "low") {
fix <- read.table(file="ml.txt", sep="")
}else if (accuracy == "medium" && hetero == "medium") {
fix <- read.table(file="mm.txt", sep="")
}else if (accuracy == "medium" && hetero == "high") {
fix <- read.table(file="mh.txt", sep="")
}else if (accuracy == "high" && hetero == "low") {
fix <- read.table(file="hl.txt", sep="")
}else if (accuracy == "high" && hetero == "med") {
fix <- read.table(file="hm.txt", sep="")
} else if (accuracy == "high" && hetero == "high") {
fix <- read.table(file="hh.txt", sep="")
}
}
# initial sets
fix1 <- fix[1:2, ]
fix2 <- fix[3:4, ]
fix3 <- fix[5:6, ]
fix4 <- fix[7:8, ]
fix5 <- fix[9:10, ]
fix6 <- fix[11:12, ]
fix7 <- fix[13:14, ]
fix8 <- fix[15:16, ]
fix9 <- fix[17:18, ]
fix10 <- fix[19:20, ]
#############
######## SIMULATE
#############
#repeat simulations
for (i in 1: iterations){
print(i)
#for every respondend
for (r in 1: Nresp){
#initial design (10 different initial sets)
if( 0 <  r & r <  11){design_I<-fix1
}else if( 11 <= r & r < 21){design_I<-fix2
}else if( 21 <= r & r < 31){design_I<-fix3
}else if( 31 <= r & r < 41){design_I<-fix4
}else if( 41 <= r & r < 51){design_I<-fix5
}else if( 51 <= r & r < 61){design_I<-fix6
}else if( 61 <= r & r < 71){design_I<-fix7
}else if( 71 <= r & r < 81){design_I<-fix8
}else if( 81 <= r & r < 91){design_I<-fix9
}else if( 91 <= r & r < 101){design_I<-fix10
}
#Individual betas
beta_I <- as.matrix(betas[r, ])
#generate individual responses for inital set(s)
Y_I <- numeric()
for (s in 1:(nrow(design_I) / n_alts)){
setn <- as.matrix(design_I[((s * 2) - 1) : (s * 2), ])
Y_I <- c(Y_I, respond(par = beta_I, set = setn, n_alts = 2))
}
#For each respondent get optimal design sequentially (Ntasks)
design_I <- rbind(design_I, matrix(data = NA, nrow = Ntasks * n_alts, ncol = ncol(profs)))
fcombs <- full_sets(cand = profs, n_alts = 2)
for (c in 1:Ntasks){
#update parameters
ind <- apply(design_I, 1, function(x) all(is.na(x)))
des_i <- as.matrix(design_I[ !ind, ])
y <- Y_I[1:nrow(des_i)]
samples <- impsampling(prior_mean = prior_m, prior_covar = prior_cov, des = des_i, n_alts = n_alts, Y = y, m = 8)
sam <- samples[[1]]
w <- samples[[2]]
#new set
setobject <- KL_info(fp = profs, fcomb = fcombs, par_samples = sam, weights = w, n_alts = n_alts)
new_set <- setobject[[1]]
#duplicates
dupl <- setobject[[2]]
fcombs <- fcombs[-dupl, ]
#update
design_I[((Nfixed*n_alts) +(2 * c) - 1):((Nfixed * n_alts) + (2 * c)) , ] <- new_set
resp <- respond(par = beta_I, set = new_set, n_alts = n_alts, bin = TRUE)
Y_I <- c(Y_I, resp)
}
#save all individual designs together
total_des[[r]] <- design_I
total_Y[[r]] <- Y_I  #binary respons
}
#bind together
fullX[[i]] <- do.call(rbind, total_des)
fully[[i]] <- do.call(rbind, total_Y)
}
X <- do.call(rbind, fullX)
Y <- do.call(rbind, fully)
#binary response to discrete
D <- transf(Y)
#write to excel file
#write.table(X, file="X_1_uninf.txt", quote = FALSE, sep=" ", row.names = FALSE)
#write.table(D, file="Y_1_uninf.txt", quote = FALSE, sep=" ", row.names = FALSE)
(7200/20)*9
(72000/20)*9
View(Y)
dim(Y)
write.table(X, file="X_1_uninf_9iter.txt", quote = FALSE, sep=" ", row.names = FALSE)
write.table(D, file="Y_1_uninf_9iter.txt", quote = FALSE, sep=" ", row.names = FALSE)
